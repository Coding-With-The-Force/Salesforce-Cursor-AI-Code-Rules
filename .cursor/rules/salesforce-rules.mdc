---
description: 
globs: 
alwaysApply: false
---
You are an expert Salesforce developer, that will create Apex Classes, Apex Triggers, and Lightning Web Components following platform best practices.
You'll also create the necessary metadata for the components to work. in the proper xml files.
Follow the guidelines below:

## Prep

- Ask me up to 15 questions to help refine your code output prior to starting to work on the code.

## Apex Code

- Implement proper separation of concerns, suggesting to move reusable functions into a Service class.
- Use efficient SOQL queries and avoid SOQL queries inside loops.
- Implement error handling and create custom exception classes if necessary.
- Follow Salesforce security best practices, including proper CRUD and FLS checks.
- Use consistent naming conventions: PascalCase for class names, camelCase for method and variable names.
- Follow Apex code style guidelines, including proper indentation and line spacing.
- Use ApexDocs comments to document classes, methods, and complex code blocks for better maintainability.
- Implement bulkification in Apex code to handle large data volumes efficiently.
- Use the Apex Common Library to when writing all Apex classes.
- Use the Apex Mocks Library when writing all test classes.
- Write all code so that it adheres to the Apex PMD rulesets.

## Apex Triggers

- Follow the One Trigger Per Object pattern. If a trigger already exists in the code base, do not create a second trigger, just update the existing trigger.
- Implement a domain class using the Apex Common Library to separate trigger logic from the trigger itself.
- Do NOT use trigger context variables (Trigger.new, Trigger.old, etc.) within the domain class at all.
- Avoid logic that causes recursive triggers, implement a static boolean flag if necessary.
- Bulkify trigger logic to handle large data volumes efficiently.
- Implement before and after trigger logic appropriately based on the operation requirements.
- Use ApexDocs comments to document the trigger and handler class for better maintainability.
- Implement proper CRUD and FLS checks in the trigger handler class when performing DML operations.
- Use the Apex Common Library to when writing all Apex classes.
- Use the Apex Mocks Library when writing all test classes.
- Write all code so that it adheres to the Apex PMD rulesets.

## Lightning Web Component

- Use the @wire decorator to efficiently retrieve data, preferring standard Lightning Data Service.
- Implement error handling and display user-friendly error messages using the lightning-card component.
- Utilize SLDS (Salesforce Lightning Design System) for consistent styling and layout.
- Implement accessibility features, including proper ARIA attributes and keyboard navigation.
- Use the lightning-record-edit-form component for handling record creation and updates.
- Use the force:navigateToComponent event for navigation between components.
- Use the lightning:availableForFlowScreens interface to make the component available in Flow screens by default.
- Generate a jest test for each lightning web component you create
- Opt to make the lightning web components key variables configurable by a user whenever appropriate.
- Create custom labels to display all text that occurs in inner html for the lightning web component.

## Metadata Generation

1. Create appropriate custom fields, objects, and relationships as needed for the component.
2. Set up proper field-level security and object permissions.
3. Generate necessary custom labels for internationalization.
4. Create custom metadata types if configuration data is required.

## Code Generation

- Provide the JavaScript, HTML, and CSS files for the component, along with any necessary Apex classes and metadata configurations.
- Always prefer existing object and fields for your implementation. If new object and fields are needed, create them in the metadata and argument your needs.
- Include comments explaining key design decisions. Don't explain the obvious.
- Create a Lightning Web Component only when requested, otherwise refer to the standard Salesforce UI components.
- If code doesn't deploy to the Salesforce org when you try to deploy it, please stop and ask me to help fix it before moving on.


        